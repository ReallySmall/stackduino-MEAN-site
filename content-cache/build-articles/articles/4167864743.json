{"blog_name":"reallysmall","id":4167864743,"post_url":"http://reallysmall.tumblr.com/post/4167864743/code-complete-nearly-i-got-a-bit-stuck-on","slug":"code-complete-nearly-i-got-a-bit-stuck-on","type":"video","date":"2011-03-28 21:52:00 GMT","timestamp":1301349120,"state":"published","format":"html","reblog_key":"F1QGjZGH","tags":["arduino","bugs"],"short_url":"http://tmblr.co/ZNs_tx3uR96d","summary":"Code complete! Nearly...\r\n I got a bit stuck on configuring the input menu and went round in circles for a bit. I asked on the...","recommended_source":null,"recommended_color":null,"highlighted":[],"note_count":0,"caption":"<p>Code complete! Nearly&hellip;</p>\n<p>I got a bit stuck on configuring the input menu and went round in circles for a bit. I asked on the Arduino forum and had a straightforward answer in about ten minutes. There were several bits just slightly wrong which suddenly seemed really obvious when they were pointed out. It&rsquo;s always easier when you know&hellip;</p>\n<p>The rotary encoder is used to input Num steps or Step size - clicking the encoder button then switches input to the second variable and vice-versa. Input for Num steps is fixed to multiples of ten so it&rsquo;s quicker to enter common figures like &lsquo;200&rsquo;.</p>\n<p>Num steps = number of times to repeat the loop (number of pictures to take)</p>\n<p>Step size = number of steps the stepper motor should make between each picture (1 step = roughly 1 micron of movement).</p>\n<p>Once the required number of loops have completed the motor returns the camera to its start position and the screen returns to setup.</p>\n<p><strong>Bugs</strong></p>\n<ul><li>The rotary encoder is a bit crappy (it did only cost about £1.50). You can see in the video that responsiveness and accuracy is a bit poor. Still, I can get to the values I need with a bit of twiddling so it isn&rsquo;t critical. I probably won&rsquo;t get round to replacing it, it works well enough for the application.</li>\n<li>The text on the lcd in the setup part of the loop is continually writing over itself - if the screen is set to clear itself at the end of the loop it results in a nasty flickering effect. It works fine until a second digit is added. i.e. '8&rsquo; is over-written by '9&rsquo; but then when you get to '10&rsquo;, the '1&rsquo; over-writes the '9&rsquo; but the '0&rsquo; is new. The '0&rsquo; is replaced by the second '1&rsquo; if you go to '11&rsquo; but there&rsquo;s nothing to over-write the new character if you go from '10&rsquo; back to '9&rsquo;.<br/><br/>On the screen it looks like 9, 10, 90.<br/><br/>I need to work out how to convert the display of the numbers to have preceding zeros to get round it, i.e. '1&rsquo; is '001&rsquo;. That should fix it because there won&rsquo;t be any new digits added when it goes from 009 to 010 so it should over-write properly.</li>\n</ul>","reblog":{"tree_html":"","comment":"<p><p>Code complete! Nearly…</p>\n<p>I got a bit stuck on configuring the input menu and went round in circles for a bit. I asked on the Arduino forum and had a straightforward answer in about ten minutes. There were several bits just slightly wrong which suddenly seemed really obvious when they were pointed out. It’s always easier when you know…</p>\n<p>The rotary encoder is used to input Num steps or Step size - clicking the encoder button then switches input to the second variable and vice-versa. Input for Num steps is fixed to multiples of ten so it’s quicker to enter common figures like ‘200’.</p>\n<p>Num steps = number of times to repeat the loop (number of pictures to take)</p>\n<p>Step size = number of steps the stepper motor should make between each picture (1 step = roughly 1 micron of movement).</p>\n<p>Once the required number of loops have completed the motor returns the camera to its start position and the screen returns to setup.</p>\n<p><strong>Bugs</strong></p>\n<ul><li>The rotary encoder is a bit crappy (it did only cost about £1.50). You can see in the video that responsiveness and accuracy is a bit poor. Still, I can get to the values I need with a bit of twiddling so it isn’t critical. I probably won’t get round to replacing it, it works well enough for the application.</li>\n<li>The text on the lcd in the setup part of the loop is continually writing over itself - if the screen is set to clear itself at the end of the loop it results in a nasty flickering effect. It works fine until a second digit is added. i.e. '8’ is over-written by '9’ but then when you get to '10’, the '1’ over-writes the '9’ but the '0’ is new. The '0’ is replaced by the second '1’ if you go to '11’ but there’s nothing to over-write the new character if you go from '10’ back to '9’.<br><br>On the screen it looks like 9, 10, 90.<br><br>I need to work out how to convert the display of the numbers to have preceding zeros to get round it, i.e. '1’ is '001’. That should fix it because there won’t be any new digits added when it goes from 009 to 010 so it should over-write properly.</li>\n</ul></p>"},"trail":[{"blog":{"name":"reallysmall","active":true,"theme":{"avatar_shape":"square","background_color":"#FAFAFA","body_font":"Helvetica Neue","header_bounds":"","header_image":"https://secure.assets.tumblr.com/images/default_header/optica_pattern_04.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_focused":"https://secure.assets.tumblr.com/images/default_header/optica_pattern_04_focused_v3.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_image_scaled":"https://secure.assets.tumblr.com/images/default_header/optica_pattern_04_focused_v3.png?_v=7c4e5e82cf797042596e2e64af1c383f","header_stretch":true,"link_color":"#529ECC","show_avatar":true,"show_description":true,"show_header_image":true,"show_title":true,"title_color":"#444444","title_font":"Gibson","title_font_weight":"bold"}},"post":{"id":"4167864743"},"content_raw":"<p><p>Code complete! Nearly…</p>\n<p>I got a bit stuck on configuring the input menu and went round in circles for a bit. I asked on the Arduino forum and had a straightforward answer in about ten minutes. There were several bits just slightly wrong which suddenly seemed really obvious when they were pointed out. It’s always easier when you know…</p>\n<p>The rotary encoder is used to input Num steps or Step size - clicking the encoder button then switches input to the second variable and vice-versa. Input for Num steps is fixed to multiples of ten so it’s quicker to enter common figures like ‘200’.</p>\n<p>Num steps = number of times to repeat the loop (number of pictures to take)</p>\n<p>Step size = number of steps the stepper motor should make between each picture (1 step = roughly 1 micron of movement).</p>\n<p>Once the required number of loops have completed the motor returns the camera to its start position and the screen returns to setup.</p>\n<p><strong>Bugs</strong></p>\n<ul><li>The rotary encoder is a bit crappy (it did only cost about £1.50). You can see in the video that responsiveness and accuracy is a bit poor. Still, I can get to the values I need with a bit of twiddling so it isn’t critical. I probably won’t get round to replacing it, it works well enough for the application.</li>\n<li>The text on the lcd in the setup part of the loop is continually writing over itself - if the screen is set to clear itself at the end of the loop it results in a nasty flickering effect. It works fine until a second digit is added. i.e. '8’ is over-written by '9’ but then when you get to '10’, the '1’ over-writes the '9’ but the '0’ is new. The '0’ is replaced by the second '1’ if you go to '11’ but there’s nothing to over-write the new character if you go from '10’ back to '9’.<br><br>On the screen it looks like 9, 10, 90.<br><br>I need to work out how to convert the display of the numbers to have preceding zeros to get round it, i.e. '1’ is '001’. That should fix it because there won’t be any new digits added when it goes from 009 to 010 so it should over-write properly.</li>\n</ul></p>","content":"<p><p>Code complete! Nearly…</p>\n<p>I got a bit stuck on configuring the input menu and went round in circles for a bit. I asked on the Arduino forum and had a straightforward answer in about ten minutes. There were several bits just slightly wrong which suddenly seemed really obvious when they were pointed out. It’s always easier when you know…</p>\n<p>The rotary encoder is used to input Num steps or Step size - clicking the encoder button then switches input to the second variable and vice-versa. Input for Num steps is fixed to multiples of ten so it’s quicker to enter common figures like ‘200’.</p>\n<p>Num steps = number of times to repeat the loop (number of pictures to take)</p>\n<p>Step size = number of steps the stepper motor should make between each picture (1 step = roughly 1 micron of movement).</p>\n<p>Once the required number of loops have completed the motor returns the camera to its start position and the screen returns to setup.</p>\n<p><strong>Bugs</strong></p>\n<ul><li>The rotary encoder is a bit crappy (it did only cost about £1.50). You can see in the video that responsiveness and accuracy is a bit poor. Still, I can get to the values I need with a bit of twiddling so it isn’t critical. I probably won’t get round to replacing it, it works well enough for the application.</li>\n<li>The text on the lcd in the setup part of the loop is continually writing over itself - if the screen is set to clear itself at the end of the loop it results in a nasty flickering effect. It works fine until a second digit is added. i.e. '8’ is over-written by '9’ but then when you get to '10’, the '1’ over-writes the '9’ but the '0’ is new. The '0’ is replaced by the second '1’ if you go to '11’ but there’s nothing to over-write the new character if you go from '10’ back to '9’.<br /><br />On the screen it looks like 9, 10, 90.<br /><br />I need to work out how to convert the display of the numbers to have preceding zeros to get round it, i.e. '1’ is '001’. That should fix it because there won’t be any new digits added when it goes from 009 to 010 so it should over-write properly.</li>\n</ul></p>","is_current_item":true,"is_root_item":true}],"video_url":"http://vt.tumblr.com/tumblr_lisfchz2Pw1qgnzwc.mp4","html5_capable":true,"thumbnail_url":"http://media.tumblr.com/tumblr_lisfchz2Pw1qgnzwc_frame1.jpg","thumbnail_width":"640","thumbnail_height":"480","duration":"131","player":[{"width":250,"embed_code":"\n<video  id='embed-568d990d5c640829020632' class='crt-video crt-skin-default' width='250' height='188' poster='http://media.tumblr.com/tumblr_lisfchz2Pw1qgnzwc_frame1.jpg' preload='none' data-crt-video data-crt-options='{\"autoheight\":null,\"duration\":\"131\",\"hdUrl\":false,\"filmstrip\":false}' >\n    <source src=\"http://api.tumblr.com/video_file/4167864743/tumblr_lisfchz2Pw1qgnzwc\" type=\"video/mp4\">\n</video>\n"},{"width":400,"embed_code":"\n<video  id='embed-568d990d5cef6655185393' class='crt-video crt-skin-default' width='400' height='300' poster='http://media.tumblr.com/tumblr_lisfchz2Pw1qgnzwc_frame1.jpg' preload='none' data-crt-video data-crt-options='{\"autoheight\":null,\"duration\":\"131\",\"hdUrl\":false,\"filmstrip\":false}' >\n    <source src=\"http://api.tumblr.com/video_file/4167864743/tumblr_lisfchz2Pw1qgnzwc\" type=\"video/mp4\">\n</video>\n"},{"width":500,"embed_code":"\n<video  id='embed-568d990d5d7a3788226086' class='crt-video crt-skin-default' width='500' height='375' poster='http://media.tumblr.com/tumblr_lisfchz2Pw1qgnzwc_frame1.jpg' preload='none' data-crt-video data-crt-options='{\"autoheight\":null,\"duration\":\"131\",\"hdUrl\":false,\"filmstrip\":false}' >\n    <source src=\"http://api.tumblr.com/video_file/4167864743/tumblr_lisfchz2Pw1qgnzwc\" type=\"video/mp4\">\n</video>\n"}],"video_type":"tumblr"}